name: 'GetDX Monorepo Service Identifier Action'
description: |
  Reusable action for sending service identifiers to GetDX in a monorepo. Utilizes `catalog-info.yaml` documents as part 
  of the Backstage eco-system to identify services.
author: 'Kajabi'

inputs:
  getdx-instance-name:
    description: 'Instance name for getdx (e.g. <instance-name>.getdx.net)'
    required: true
  getdx-token:
    description: 'Token for GetDX API Calls'
    required: true
  service-association-type:
    description: 'The type of service association to use (e.g. `backstage`)'
    required: false
    type: choice
    default: 'backstage'
    options: 
      - backstage
      - service-file
      - codeowners
  catalog-filename:
    description: 'The name of the catalog file to search for in the tree (e.g. `catalog-info.yaml`)'
    required: false
    default: 'catalog-info.yaml'
  fetch-depth:
    description: 'The depth of history to fetch for the consuming repository'
    required: false
    default: "0"
  debug:
    description: 'Enable debug mode'
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with: 
        fetch-depth: ${{ inputs.fetch-depth }}

    - name: Get list of changed files
      id: getfile
      shell: bash
      run: |
        files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} --)
        echo "Changed files: $files"
        echo "$files" >> changed_files.txt

    - name: Identify affected Backstage services
      id: identify-backstage
      if: ${{ inputs.service-association-type == 'backstage' }}
      shell: bash
      run: |
        services=""
        while IFS= read -r file; do
          service=$(${{ github.action_path }}/bin/backstage-service-reference-association $file ${{ inputs.catalog-filename }})
          services="$services $service"
        done < changed_files.txt
        unique_services=$(echo $services | xargs -n1 | sort -u | xargs)
        echo "Affected services: $unique_services"
        echo "AFFECTED_SERVICES=$unique_services" >> $GITHUB_ENV

    - name: Identify affected services based on .service-associations file
      id: identify-service-associations-file
      if: ${{ inputs.service-association-type == 'service-file' }}
      shell: bash
      run: |
        services=""
        services=$(${{ github.action_path }}/bin/association-file-service-reference-association changed_files.txt)
        unique_services=$(echo $services | xargs -n1 | sort -u | xargs)
        echo "Affected services: $unique_services"
        echo "AFFECTED_SERVICES=$unique_services" >> $GITHUB_ENV

    - name: Identify affected services based on .github/CODEOWNERS file
      id: identify-codeowners
      if: ${{ inputs.service-association-type == 'codeowners' }}
      shell: bash
      run: |
        services=""
        services=$(${{ github.action_path }}/bin/github-codeowners-service-reference-association changed_files.txt)
        unique_services=$(echo $services | xargs -n1 | sort -u | xargs)
        echo "Affected services: $unique_services"
        echo "AFFECTED_SERVICES=$unique_services" >> $GITHUB_ENV

    - name: Post affected services
      id: post-services
      shell: bash
      run: |
        json_payload=$(jq -n \
          --arg github_pull_id ${{ github.event.pull_request.id }} \
          --arg services '[${{ env.AFFECTED_SERVICES }}]' \
          '{
             github_pull_id: $github_pull_id,
             services: $services
           }')

        if [ "${{ inputs.debug }}" == "true" ]; then
          echo "DEBUG: Debug is on so no API call will be made. Payload would be:"
          echo "JSON_PAYLOAD: $json_payload"
        else
          RESPONSE_CODE=$(curl 
            -X POST \
            https://${{ inputs.getdx-instance-name }}.getdx.net/api/deployments.setPullServices \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ inputs.getdx-token }}" \
            -d "$json_payload"
          )

          if [ "$RESPONSE_CODE" -ne 200 ]; then
            ERROR_MESSAGE=$(jq -r '.message' response.txt 2>/dev/null || echo "Unknown error") 
            ERROR_TYPE=$(jq -r '.error' response.txt 2>/dev/null || echo "Unknown error") 

            echo "Error response from API: HTTP status code $RESPONSE_CODE"
            echo "Error type: $ERROR_TYPE" 
            echo "Error message: $ERROR_MESSAGE"

            exit 1 # Fail the step explicitly if an error is detected 
          fi
        fi
