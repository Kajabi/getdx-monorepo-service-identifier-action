name: 'GetDX Monorepo Service Identifier Action'
description: |
  Reusable action for sending service identifiers to GetDX in a monorepo. Utilizes `catalog-info.yaml` documents as part 
  of the Backstage eco-system to identify services.
author: 'internal-platform-and-automation'

inputs:
  getdx-instance-name:
    description: 'Instance name for getdx (e.g. <instance-name>.getdx.net)'
    required: true
  getdx-token:
    description: 'Token for GetDX API Calls'
    required: true
  catalog-filename:
    description: 'The name of the catalog file to search for in the tree (e.g. `catalog-info.yaml`)'
    required: false
    default: 'catalog-info.yaml'
  fetch-depth:
    description: 'The depth of history to fetch for the consuming repository'
    required: false
    default: "0"

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with: 
        fetch-depth: ${{ inputs.fetch-depth }}

    - name: Get list of changed files
      id: getfile
      shell: bash
      run: |
        files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} --)
        echo "Changed files: $files"
        echo "$files" >> changed_files.txt

    - name: Identify affected services
      id: identify
      shell: bash
      run: |
        services=""
        while IFS= read -r file; do
          service=$(${{ github.action_path }}/bin/service-references $file ${{ inputs.catalog-filename }})
          services="$services $service"
        done < changed_files.txt
        unique_services=$(echo $services | xargs -n1 | sort -u | xargs)
        echo "Affected services: $unique_services"
        echo "::set-output name=affected_services::$unique_services"

    - name: Post affected services
      id: post-services
      shell: bash
      run: |
        json_payload=$(jq -n \
          --arg github_pull_id ${{ github.event.pull_request.id }} \
          --arg services '[${{ steps.services.outputs.affected_services }}]' \
          '{
             github_pull_id: $github_pull_id,
             services: $services
           }')

        curl -X POST \
          http://${{ inputs.getdx-instance-name }}.getdx.net/api/deployments.setPullServices \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ inputs.getdx-token }}" \
          -d "$json_payload"

        if [ "$RESPONSE_CODE" -ne 200 ]; then
          ERROR_MESSAGE=$(jq -r '.message' response.txt)
          ERROR_TYPE=$(jq -r '.error' response.txt)

          echo "Error response from API: HTTP status code $RESPONSE"
          echo "Error type: $ERROR_TYPE"
          echo "Error message: $ERROR_MESSAGE"

          exit 1 # Fail the step explicitly if an error is detected 
        fi
